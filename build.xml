<?xml version="1.0"?>
<project name="JsonRPC in CPP using libjson-rpc-cpp" default="targets">
  <taskdef resource="cpptasks.tasks" />
  <taskdef resource="net/sf/antcontrib/antcontrib.properties" />
  <property name="src.dir" value="src" />
  <property name="dist.dir" value="bin" />
  <property name="classes.dir" value="classes" />
  <property name="lib" value="lib" />
  <property name="obj.dir" value="obj" />
  <property name="json.file.name" value="waypoint.json" />
  <property environment="env" />
  <property name="ostype" value="${env.OSTYPE}" />

  <property name="host.port" value="http://127.0.0.1:8080" />
  <property name="port.num" value="8080" />

  <target name="targets">
    <echo message="base directory is: ${basedir}" />
    <echo message="Targets are clean, prepare, generate.client.stub, build.all, build.java.server, build.java.client, build.cpp.client, execute.java.server, execute.java.client, targets" />
    <echo message="invoke java server (after build): ant execute.java.server -Dport.num=8080" />
    <echo message="invoke cpp client (after build): ./bin/WaypointClient.exe http://127.0.0.1:8080" />
    <echo message="invoke java client (after build): ant execute.java.client -Dhost.port=http://127.0.0.1:8080" />
  </target>

  <path id="compile.classpath">
    <pathelement location="${classes.dir}" />
    <pathelement path="${lib}/org.json-20140503.jar"/>
  </path>

  <target name="clean">
    <delete dir="${classes.dir}" failonerror="false" />
    <delete dir="${dist.dir}" failonerror="false" />
    <delete dir="${obj.dir}" failonerror="false" />
    <delete file="${src.dir}/client/WaypointStubClient.h"
            failonerror="false" />
  </target>

  <target name="prepare">
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${obj.dir}/cpp" />
    <if>
      <isset property="env.USERNAME" />
      <then>
        <echo message="detected username is: ${env.USERNAME}" />
      </then>
    <elseif>
      <isset property="env.USER" />
      <then>
        <echo message="detected user is: ${env.USER}" />
      </then>
    </elseif>
    </if>
    <echo message="host name is: ${os.name}" />
    <echo message="host arch is: ${os.arch}" />
    <echo message="host version is: ${os.version}" />
    <echo message="base directory is: ${basedir}" />

    <!-- Platform identification -->
    <condition property="build.host.islinux">
      <and>
        <os family="unix" />
        <not>
          <contains string="${os.name}" substring="mac"
                    casesensitive="false" />
        </not>
      </and>
    </condition>
    <condition property="build.host.platform" value="linux">
      <isset property="build.host.islinux" />
    </condition>

    <condition property="build.host.ismac">
      <and>
        <os family="unix" />
        <contains string="${os.name}" substring="mac" casesensitive="false" />
      </and>
    </condition>
    <condition property="build.host.platform" value="mac">
      <isset property="build.host.ismac" />
    </condition>

    <condition property="build.host.iswindows">
      <os family="windows" />
    </condition>
    <condition property="build.host.platform" value="windows">
      <isset property="build.host.iswindows" />
    </condition>
    <fail unless="build.host.platform"
          message="Building on ${os.name} is not supported" />
    <echo message="build.host.platform is: ${build.host.platform}" />

    <if>
      <isset property="build.host.ismac" />
      <then>
        <echo message="detected a mac host" />
        <property name="cxxflag" value="-std=c++0x" />
        <property name="linkflag" value="" />
        <property name="client.lib.list" value="jsonrpc,stdc++,curl,fltk" />
        <property name="server.lib.list" value="jsonrpc,stdc++" />
        <property name="lib.dir" value="/usr/local/lib" />
      </then>
    <elseif>
      <isset property="build.host.iswindows" />
      <then>
        <echo message="detected a windows host" />
        <property name="cxxflag" value="-D_WIN32_WINDOWS=0x0501 -std=c++0x" />
        <property name="linkflag" value="" />
        <property name="client.lib.list" value="jsonrpc,stdc++,fltk" />
        <property name="server.lib.list" value="jsonrpc,stdc++" />
        <property name="lib.dir" value="${env.CYGWIN_HOME}/usr/local/lib" />
      </then>
    </elseif>
    <elseif>
      <isset property="build.host.islinux" />
      <then>
        <echo message="detected a linux host" />
        <property name="cxxflag" value="-DI_AM_NOT_USED" />
        <property name="linkflag" value="-Wl,--no-enum-size-warning" />
        <property name="client.lib.list" value="jsonrpc,stdc++,fltk" />
        <property name="server.lib.list" value="jsonrpc,stdc++" />
        <property name="lib.dir" value="/usr/local/lib" />
      </then>
    </elseif>
    <else>
      <echo message="failed to detect a host I know how to build on" />
    </else>
    </if>
  </target>

  <!-- CPP JSON -->
  <target name="generate.client.stub" depends="prepare">
    <exec dir="${basedir}" executable="jsonrpcstub">
      <arg line="-c -o ${src.dir}/cpp ${json.file.name} waypointstub" />
    </exec>
  </target>

  <target name="build.all"
          depends="clean,prepare,build.java.server,build.java.client,build.cpp.client"
          description="Clean then build java server, cpp client and java client" />

  <!-- CALL FIRST -->
  <target name="build.java.server" depends="prepare"
          description="Compile Java server sources">
    <javac srcdir="${src.dir}/java/server"
           destdir="${classes.dir}"
           includeantruntime="false">
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <target name="build.java.client" depends="prepare"
          description="Compile Java client sources">
    <javac srcdir="${src.dir}/java/client"
           destdir="${classes.dir}"
           includeantruntime="false">
      <classpath refid="compile.classpath" />
    </javac>
  </target>
  
  <target name="build.cpp.client" depends="generate.client.stub">
    <cc outtype="executable" subsystem="console"
        outfile="${dist.dir}/WaypointClient"
        objdir="${obj.dir}/cpp">
      <compilerarg value="${cxxflag}" />
      <linkerarg value="${linkflag}" />
      <libset dir="${lib.dir}" libs="${client.lib.list}" />
      <fileset dir="${src.dir}/cpp" includes="WaypointClient.cpp,WaypointGUI.cpp,waypointstubclient.h" />
    </cc>
  </target>

  <!-- CALL FIRST/SECOND -->
  <target name="execute.java.server" depends="build.java.server"
          description="Start server">
    <echo message="user.dir is: ${user.dir}"/>
    <echo message="command line execute: ant execute.java.server -Dport.num=8080" />
    <java classname="cst420.thread.server.WaypointServer" fork="yes">
      <classpath refid="compile.classpath"/>
      <arg value="${port.num}"/>
    </java>
  </target>

  <target name="execute.java.client" depends="build.java.client"
          description="Start program">
    <echo message="user.dir is: ${user.dir}"/>
    <java classname="cst420.thread.client.WaypointClient" fork="yes">
      <classpath refid="compile.classpath"/>
      <arg value="${host.port}"/> 
    </java>
  </target>
</project>
